configure([
		project(":gdx"),
		project(":backends:gdx-backend-lwjgl3"),
		project(":extensions:gdx-freetype"),
		project(":extensions:gdx-lwjgl3-angle")
]) {
	apply plugin: 'maven-publish'
	apply plugin: 'signing'

	afterEvaluate { project ->
		//Workaround android not having components populated yet.
		afterEvaluate {
			publishing {
				publications {
					mavenJava(MavenPublication) {
						//Most normal java projects
						if(components.findByName("java") != null)
							from components.java

						pom {
							name = POM_NAME
							if(!POM_DESCRIPTION.isEmpty())
								description = POM_DESCRIPTION
							url = POM_URL
							licenses {
								license {
									name = POM_LICENCE_NAME
									url = POM_LICENCE_URL
									distribution = POM_LICENCE_DIST
								}
							}
							developers {
								developer {
									id = "libGDX Developers"
									url = "https://github.com/libgdx/libgdx/graphs/contributors"
								}
							}
							scm {
								connection = POM_SCM_CONNECTION
								developerConnection = POM_SCM_DEV_CONNECTION
								url = POM_SCM_URL
							}
						}
					}
					//Libgdx natives all follow the "$name-platform" artifact structure.
					if(project.tasks.findByName('jnigen')) {
						mavenPlatform(MavenPublication) {
							artifactId = artifactId + "-platform"
							if(project.tasks.findByName('jnigenJarNativesDesktop'))
								artifact jnigenJarNativesDesktop { }

							[
									'arm64-v8a',
									'armeabi-v7a',
									'x86_64',
									'x86'
							].each { id ->
								if(project.tasks.findByName("jnigenJarNativesAndroid${id}"))
									artifact "jnigenJarNativesAndroid${id}" { }
							}

							if(project.tasks.findByName('jnigenJarNativesIOS'))
								artifact jnigenJarNativesIOS { }

							pom {
								name = POM_NAME + " Native Libraries"
								if(!POM_DESCRIPTION.isEmpty())
									description = POM_DESCRIPTION
								url = POM_URL
								licenses {
									license {
										name = POM_LICENCE_NAME
										url = POM_LICENCE_URL
										distribution = POM_LICENCE_DIST
									}
								}
								developers {
									developer {
										id = "libGDX Developers"
										url = "https://github.com/libgdx/libgdx/graphs/contributors"
									}
								}
								scm {
									connection = POM_SCM_CONNECTION
									developerConnection = POM_SCM_DEV_CONNECTION
									url = POM_SCM_URL
								}
							}
						}
					}
				}

				repositories {
					maven {
						name = "teamCelestialPublic"
						url = "https://maven.teamcelestial.org/public"
						credentials(PasswordCredentials)
					}
				}
			}

			signing {
				useGpgCmd()
				sign publishing.publications.mavenJava

				if(project.tasks.findByName('jnigen'))
					sign publishing.publications.mavenPlatform
			}

			//Simply using "required" in signing block doesn't work because taskGraph isn't ready yet.
			gradle.taskGraph.whenReady {
				tasks.withType(Sign) {
					onlyIf { isReleaseBuild() }
				}
			}
		}
	}
}
